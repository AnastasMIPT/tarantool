test_run = require('test_run').new()
---
...
fiber = require 'fiber'
---
...
net = require('net.box')
---
...
--
-- gh-3107: fiber-async netbox.
--
cond = nil
---
...
box.schema.user.grant('guest', 'execute', 'universe')
---
...
function long_function(...) cond = fiber.cond() cond:wait() return ... end
---
...
function finalize_long() while not cond do fiber.sleep(0.01) end cond:signal() cond = nil end
---
...
s = box.schema.create_space('test')
---
...
pk = s:create_index('pk')
---
...
s:replace{1}
---
- [1]
...
s:replace{2}
---
- [2]
...
s:replace{3}
---
- [3]
...
s:replace{4}
---
- [4]
...
c = net:connect(box.cfg.listen)
---
...
--
-- Check long connections, multiple wait_result().
--
future = c:call('long_function', {1, 2, 3}, {is_async = true})
---
...
future:result()
---
- null
- Response is not ready
...
future:is_ready()
---
- false
...
future:wait_result(0.01) -- Must fail on timeout.
---
- null
- Timeout exceeded
...
finalize_long()
---
...
ret = future:wait_result(100)
---
...
future:is_ready()
---
- true
...
-- Any timeout is ok - response is received already.
future:wait_result(0)
---
- [1, 2, 3]
...
future:wait_result(0.01)
---
- [1, 2, 3]
...
ret
---
- [1, 2, 3]
...
_, err = pcall(future.wait_result, future, true)
---
...
err:find('Usage') ~= nil
---
- true
...
_, err = pcall(future.wait_result, future, '100')
---
...
err:find('Usage') ~= nil
---
- true
...
--
-- __serialize and __tostring future methods
--
future = c:call('long_function', {1, 2, 3}, {is_async = true})
---
...
tostring(future)
---
- 'net.box.request: 5'
...
future
---
- on_push_ctx: []
  method: call
  sync: 5
  on_push: 'function: builtin#91'
...
finalize_long()
---
...
future:wait_result()
---
- [1, 2, 3]
...
future
---
- method: call
  on_push_ctx: []
  result: [1, 2, 3]
  on_push: 'function: builtin#91'
  sync: 5
...
future = c:eval('assert(false)', {}, {is_async = true})
---
...
tostring(future)
---
- 'net.box.request: 6'
...
future:wait_result()
---
- null
- 'eval:1: assertion failed!'
...
future
---
- error: 'eval:1: assertion failed!'
  method: eval
  on_push_ctx: []
  on_push: 'function: builtin#91'
  sync: 6
...
future = c:eval('return 123', {}, {is_async = true, skip_header = true, \
                                   buffer = require('buffer').ibuf()})
---
...
tostring(future)
---
- 'net.box.request: 7'
...
future:wait_result()
---
- 6
...
test_run:cmd("push filter '0x[a-f0-9]+' to '<addr>'")
---
- true
...
future
---
- method: eval
  result: 6
  on_push_ctx: []
  buffer:
    ibuf:
      rpos: 'cdata<char *>: <addr>'
      wpos: 'cdata<char *>: <addr>'
  on_push: 'function: builtin#91'
  sync: 7
  skip_header: true
...
test_run:cmd("clear filter")
---
- true
...
box.schema.user.revoke('guest', 'execute', 'universe')
---
...
c:close()
---
...
s:drop()
---
...
